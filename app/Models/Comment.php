<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class Comment extends Model
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'product_id',
        'text',
        'positive_points',
        'negative_points',
        'is_analysed',
        'gold_selected',
        'sentiment_polarity',
        'category_id'
    ];

    /**
     * Get the main category of the products
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function category()
    {
        return $this->belongsTo(Category::class);
    }


    /**
     * Get the products that owns the comment
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function product()
    {
        return self::belongsTo(Product::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function sentences()
    {
        return self::hasMany(Sentence::class);
    }

    /**
     * @param int $id
     * @param string $commentText
     * @return mixed
     */
    public static function fetch($id = 0, $commentText = '')
    {
        if ($id != 0) {
            $comment = self::find($id);
        } else {
            $comment = self::where('text', $commentText)->first();
        }
        return $comment;
    }

    /**
     * @param string $selectRaw
     * @param int $limit
     * @param int $offset
     * @param string $whereClause
     * @param string $orderBy
     * @param string $order
     * @return mixed
     */
    public static function fetchComments($selectRaw = "*", $whereClause = "1", $limit = PHP_INT_MAX, $offset = 0, $orderBy = 'id', $order = 'ASC')
    {
        $comments = self::select(DB::raw($selectRaw))
            ->whereRaw($whereClause)
            ->skip($offset)
            ->take($limit)
            ->orderBy($orderBy, $order)
            ->get();

        return $comments;
    }

    /**
     * @param $commentData
     * @param array $updateData
     * @return mixed
     */
    public static function updateOrInsert($commentData, $updateData = [])
    {
        $comment = self::updateOrCreate($commentData, $updateData);

        return $comment;
    }


    public static function insert($newComment)
    {
        return self::create($newComment);

    }

    public static function deleteComments($condition)
    {
        return self::whereRaw($condition)->delete(); // TODO: Change the autogenerated stub
    }


}
